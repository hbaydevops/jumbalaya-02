pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/hbaydevops/jumbalaya-02' // Replace with your GitHub repository URL
        BRANCH = 'main' // Change if needed
        DOCKER_IMAGE = 'hbaydocker2/jumbalaya-image' // Replace with your Docker Hub username and image name
        IMAGE_TAG = "V1.0.${BUILD_NUMBER}"  // Set the image tag as an environment variable
        DOCKER_CREDENTIALS_ID = 'jenkins-dockerhub-auth' // Ensure this is stored in Jenkins
        // DOCKERHUB_CREDENTIALS = credentials('docker-hub-auth')
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: "${BRANCH}", url: "${REPO_URL}"
            }
        }

        // stage('Clone Repository') {
        //     steps {
        //         script {
        //             withCredentials([usernamePassword(credentialsId: 'github-credentials', usernameVariable: 'GIT_USER', passwordVariable: 'GIT_PASS')]) {
        //                 sh "git clone https://${GIT_USER}:${GIT_PASS}@github.com/hbaydevops/jumbalaya-02"


        
        stage('Login to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh '''
                          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                        '''

                    }
                }
            }
        }

        stage('Testing') {
            agent {
                docker { image 'maven:3.8.4-eclipse-temurin-17-alpine' }
            }
            steps {
                sh '''
                cd demo-project
                mvn test
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    sh """
                    cd ${WORKSPACE}/demo-project
                    docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} .
                    """
                }
            }
        }


        stage('Push Docker Image') {
            steps {
                script {
                    sh "docker push ${DOCKER_IMAGE}:${IMAGE_TAG}"
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Docker image successfully built and pushed to DockerHub!"
        }
        failure {
            echo "‚ùå Pipeline failed! Check the logs for errors."
        }
        always {
            echo "üîÑ Pipeline execution completed."
        }
    }
}
