pipeline {
    agent any

    environment {
        REPO_URL = 'https://github.com/hbaydevops/jumbalaya-02' // Replace with your GitHub repository URL
        BRANCH = 'main' // Change if needed
        DOCKER_IMAGE = 'hbaydocker2/jumbalaya-image' // Replace with your Docker Hub username and image name
        IMAGE_TAG = "V1.0.${BUILD_NUMBER}"  // Set the image tag as an environment variable

        DOCKER_CREDENTIALS_ID = 'jenkins-docker-auth' // Ensure this is stored in Jenkins
        SONARQUBE_URL = 'https://sonarqube.devopseasylearning.uk/'
        SONAR_TOKEN = credentials('sonar-token')  // Use the stored token
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: "${BRANCH}", url: "${REPO_URL}"
            }
        }

        stage('Login to DockerHub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin"
                    }
                }
            }
        }

        stage('Testing') {
            agent {
                docker { image 'maven:3.8.4-eclipse-temurin-17-alpine' }
            }
            steps {
                dir('demo-project') {
                    sh 'mvn test'
                }
            }
        }

        stage('Build') {
            steps {
                dir('demo-project') {
                    sh 'mvn clean package'
                }
            }
        }

        stage('Build and SonarQube Analysis') {
            steps {
                dir('demo-project') {
                    withSonarQubeEnv('SonarQube') {
                        sh '''
                        mvn clean verify sonar:sonar \
                            -Dsonar.projectKey=jambalaya-a1helena \
                            -Dsonar.host.url=$SONARQUBE_URL \
                            -Dsonar.token=$SONAR_TOKEN
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    timeout(time: 15, unit: 'MINUTES') {
                        def qg = waitForQualityGate()
                        if (qg.status != 'OK') {
                            error "Quality Gate failed: ${qg.status}"
                        }
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dir('demo-project') {
                        sh "docker build -t ${DOCKER_IMAGE}:${IMAGE_TAG} ."
                    }
                }
            }
        }

        stage('Push Docker Image') {
            steps {
                script {
                    sh "docker push ${DOCKER_IMAGE}:${IMAGE_TAG}"
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Docker image successfully built and pushed to DockerHub!"
        }
        failure {
            echo "‚ùå Pipeline failed! Check the logs for errors."
        }
        always {
            echo "üîÑ Pipeline execution completed."
        }
    }
}
